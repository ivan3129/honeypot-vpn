input {
	beats {
		port => 5044
	}

	tcp {
		port => 5000
	}
	udp {
		port => 6000
	}
}

filter{	
	grok {
		break_on_match => false
		match => { "message" => "data=%{GREEDYDATA:bodydata}" }
    }

	json{ 
	      source => "message"
	      target => "parsed_json"
     
	      skip_on_invalid_json => true
	 }
	 
	 if [parsed_json][timestamp] {
mutate {	  add_field => {"timestamp" => "%{[parsed_json][timestamp]}"} }
}

	 
	 if [parsed_json][request_type] {
mutate {	  add_field => {"request_type" => "%{[parsed_json][request_type]}"} }
}

	 if [parsed_json][protocol] {
mutate {	  add_field => {"protocol" => "%{[parsed_json][protocol]}"} }
}


	 if [parsed_json][vpn_client_ip] {
mutate {	  add_field => {"vpn_client_ip" => "%{[parsed_json][vpn_client_ip]}"} }
}
	
		 if [parsed_json][vpn_destination_ip] {
mutate {	  add_field => {"vpn_destination_ip" => "%{[parsed_json][vpn_destination_ip]}"} }
}
	 	
	
		 if [parsed_json][vpn_destination_port] {
mutate {	  add_field => {"vpn_destination_port" => "%{[parsed_json][vpn_destination_port]}"} }
}

		 if [parsed_json][vpn_client_port] {
mutate {	  add_field => {"vpn_client_port" => "%{[parsed_json][vpn_client_port]}"} }
}
	 	
		 if [parsed_json][body_length] {
mutate {	  add_field => {"body_length" => "%{[parsed_json][body_length]}"} }
}		
	 
	mutate {

	  remove_field => [ "json", "parsed_json" ]
	 }
	 
	  ip2location {
    		source => "vpn_client_ip"
		# Set path to the database located
		database => "/usr/share/logstash/ip2locationdatabases/ipv4/IP2LOCATION-LITE-DB1.BIN"
		# Enable memory mapped to be used
		use_memory_mapped => true
  	}
}





output {
	elasticsearch {
		hosts => "elasticsearch:9200"
		user => "logstash_internal"
		password => "${LOGSTASH_INTERNAL_PASSWORD}"
	}
}

